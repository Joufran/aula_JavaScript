Cinco patinhos foram passear. 
Além das montanhas. 
Para brincar. 
A mamãe gritou: quá, quá, quá, quá. 
Mas só quatro patinhos voltaram de lá. 
Quatro patinhos foram passear. 
Além das montanhas. 
Para brincar. 
A mamãe gritou: quá, quá, quá, quá. 
Mas só três patinhos voltaram de lá. 
Três patinhos foram passear. 
Além das montanhas. 
Para brincar. 
A mamãe gritou: quá, quá, quá, quá. 
Mas só dois patinhos voltaram de lá. 
Dois patinhos foram passear. 
Além das montanhas. 
Para brincar. 
A mamãe gritou: quá, quá, quá, quá. 
Mas só um patinho voltou de lá. 
Um patinho foi passear. 
Além das montanhas. 
Para brincar. 
A mamãe gritou: quá, quá, quá, quá. 
Mas nenhum patinho voltou de lá.

A mamãe patinha ficou tão triste naquele dia 
que resolveu pedir sua ajuda para procurar 
além das montanhas, na beira do mar, quantos 
patinhos não voltaram de lá.

Entrada
Haverá vários casos de testes, 
a primeira linha de cada caso de teste contém 
um inteiro (0 ≤ P ≤ 1019) representando a quantidade 
total de patos, a entrada termina com P = -1.

Saída
O arquivo de saída deve conter a quantidade de 
patinhos que retornaram.

 
Exemplo de Entrada	Exemplo de Saída
0                         0
1                         0
10                        9
-1   

// a função gets é implementada dentro do sistema para ler as entradas(inputs) dos dados e a função print para imprimir a saída (output) de dados e já pula uma linha ("\n")
// Abaixo segue um exemplo de código que você pode ou não utilizar

let n = parseInt(gets());

//TODO: Complete os espaços em branco com uma possível solução para o desafio
        
while(n != -1) { 
        if ( n == 0  ) 
            print( n    ); 
        else 
            print( n  - 1  );        
        n = parseInt(gets()); 
    }                




===============

Desafio
Pedra, Papel, Ataque Aéreo é um jogo antigo mas que é popular até hoje. Nele, duas ou mais pessoas fazem gestos com a mão para vencer o adversário. 

As partidas são muito simples. Os jogadores podem escolher entre o sinal de uma Pedra (o punho), o sinal de um Papel (a palma aberta), e o sinal para o Ataque Aéreo (igual o do Papel, mas com apenas o polegar e o mindinho estendidos).


Uma partida, com dois jogadores, possuem as seguintes regras para se definir um vencedor:

Ataque Aéreo vs. Pedra: Neste caso, o jogador com o Ataque Aéreo derrota o jogador com a Pedra, por razões óbvias.
Pedra vs. Papel: Neste caso, o jogador com a Pedra derrota o com Papel, porque a Pedra machuca muito mais.
Papel vs. Ataque Aéreo: Aqui o Ataque Aéreo ganha, porque Ataque Aéreo sempre ganha e o Papel é patético.
Papel vs. Papel: Nesta variação, ambos os jogadores ganham, porque o Papel é inútil e ninguém que enfrenta o Papel pode perder.
Pedra vs. Pedra: Para este caso não há ganhador, porque depende do que os jogadores decidem fazer com a Pedra e normalmente não fazem nada.
Ataque Aéreo vs. Ataque Aéreo: Quando isto acontece, todos os jogadores perdem, devido a Aniquilação Mútua.
Agora desenvolva um programa que, dada as escolhas de dois jogadores, informe quem venceu o jogo.

Entrada
A entrada consiste de N (1 ≤ N ≤ 1000) casos de teste. N deve ser lido na primeira linha da entrada. Cada caso de teste é composto por duas linhas, cada uma contendo uma string. A primeira string representa o sinal escolhido pelo jogador 1 e a segunda string representa o sinal escolhido pelo jogador 2. Essas strings podem ser:

“ataque”: para representar o Ataque Aéreo
“pedra”: para representar a Pedra
“papel”: para representar o Papel
Saída
A saída deve conter o seguinte:

“Jogador 1 venceu”: se o Jogador Um tiver vencido a partida
“Jogador 2 venceu”: se o Jogador Dois tiver vencido a partida
“Ambos venceram”: se os dois jogadores tiverem vencido a partida
“Sem ganhador”: se não houver ganhador
“Aniquilacao mutua”: se ocorrer Aniquilação Mútua
Cada saída de um caso de teste deve estar em uma linha.

 
Exemplo de Entrada	Exemplo de Saída
2                  Sem ganhador
pedra              Jogador 1 venceu  
pedra
ataque
papel


// a função gets() é implementada dentro do sistema para ler as entradas(inputs) dos dados e a função print() para imprimir a saída (output) de dados e já pula uma linha ("\n")
// Abaixo segue um exemplo de código que você pode ou não utilizar

let N = parseInt(gets());
let jogador1, jogador2;
for (let i = 0; i < N; i++) {
    jogador1 = gets();
    jogador2 = gets();
    		
//TODO: Complete os espaços em branco com uma possível solução para o desafio

    if(jogador1.toUpperCase() === "ATAQUE" && jogador2.toUpperCase() === "ATAQUE")
        print("Aniquilacao mutua");
    else if (jogador1.toUpperCase() === "PAPEL"  && jogador2.toUpperCase() === "PAPEL")
    	print("Ambos venceram");
    else if (jogador1.toUpperCase() === "ATAQUE") 
      print("Jogador 1 venceu");
    else if (jogador2.toUpperCase() === "ATAQUE") 
      print("Jogador 2 venceu");
    else if (jogador2.toUpperCase() === "PAPEL")  
      print("Jogador 1 venceu");
    else if (jogador1.toUpperCase() === "PAPEL")  
      print("Jogador 2 venceu");
    else print("Sem ganhador");
}


=========
Tri-du é um jogo de cartas derivado do popular jogo de Truco. O jogo utiliza um baralho normal de 52 cartas, com treze cartas de cada naipe, mas os naipes são ignorados. Apenas o valor das cartas,considerados como inteiros de 1 a 13, são utilizados.

No jogo, cada jogador recebe três cartas. As regras são simples:

 

Um trio (três cartas de mesmo valor) ganha de uma dupla (duas cartas de mesmo valor).
Um trio formado por cartas de maior valor ganha de um trio formado por cartas de menor valor.
Uma dupla formada por cartas de maior valor ganha de uma dupla formada por cartas de menor valor.
Note que o jogo pode não ter ganhador em muitas situações; nesses casos, as cartas distribuídas são devolvidas ao baralho, que é embaralhado e uma nova partida é iniciada

Um jogador já recebeu duas das cartas que deve receber, e conhece seus valores. Sua tarefa é escrever um programa para determinar qual o valor da terceira carta que maximiza a probabilidade de esse jogador ganhar o jogo.

Entrada
A entrada consiste de uma ´unica linha que contém dois inteiros, A (1 ≤ A ≤ 13) e B (1 ≤ B ≤ 13) indicando os valores das duas primeiras cartas recebidas.

Saída
Seu programa deve produzir uma única linha com um inteiro representando o valor da carta que maximiza a probabilidade de o jogador ganhar a partida.

 
Exemplo de Entrada	Exemplo de Saída
10 7               10
2 2                                           2                      


// a função gets é implementada dentro do sistema para ler as entradas(inputs) dos dados e a função print para imprimir a saída (output) de dados e já pula uma linha ("\n")
// Abaixo segue um exemplo de código que você pode ou não utilizar

    var s = gets().split(" ");
    let A = parseInt(s[0]);
    let B = parseInt(s[1]);
    let C;
		if( A > B  ){
			C = A;
		}
		else if( A < B ){
			C = A;
		}
		else{
			   c = B  ;
		}
		print(  c    );                       

 



 



 

 
